1 The benchmarks folder cannot be renamed becaues ProjectDirectoryHelper.java uses to detect the project directory in it.
2 I assume the project placed in the benchmarks folder complies with the eclipse project format, 
  i.e., the src, bin and lib are in the same project root£¬ the libraries are all in the lib folder. 
3 lockobj: AC_compositionid_k, k=System.currentTime();
  markerfield:AC_compositionid_field
  markerfieldaccess: AC_compositionid_field=100;
  
  4	// please update your eclipse project accordingly, if they do not conform to these conventional names.
	// please remove the conflicting jars or the jars which are not used.
	See the Util.classpath() method. We compute the classpath automatically! So, the project's layout has to be restrained.


5 We do not allow users to specify excludeoptions and includeoptions through the command line arguments.
Instead, one can set them in the CentralConstants.java


6 we cannot handle the transform-run-prediction within a running instance, because different versions of a Monitor.class 
are required in different phases. One has to use the bash file or ant file to glue the phases for processing a composition together, and also
the processing of all compositions.


7 when forming the atomic composition, the order between istmt and jstmt in pair(istmt,jstmt)  matters.
We insert the breakpointline after the first element, i.e., istmt, to wait for 
the occurence of the AV.
Clearly, the point after the first element represents the internal of the composition,
 therefore, the first element should represent the start of the composition.
 Therefore for the complementation sympotom, we enforce the constraint.
if (line1 < line2) { // the order matters,  we will insert code after the first element to wait for AV. 
						composition = Composition.Factory.formAC(iStmt, jStmt,
								b);
					} else {
						composition = Composition.Factory.formAC(jStmt, iStmt,
								b);
					}